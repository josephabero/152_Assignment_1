152 Assignment

By: Joseph Abero, Jon Andrew Hernandez, Gong Huang, and Colin Shardt

The team is developing a compiler, so far what has been developed:

- Lexer
- Parser

Code is written in C++ and project can be built and run in the IDE of your choice. 
These are steps to run in command line.

TO RUN
--------
To compile in command line, enter the src directory and run commands:

> make
> make run
> make clean

make: 			builds main.cpp
make run: 		runs project (observe console output)
make clean: 	removes main.exe, must run make again to run project

-I- If changes are made to class files (lexer.cpp, token.cpp, etc), 'make clean', then 'make'


PARSER FEATURES IMPLEMENTED
--------------------
All grammar handled by the sample code (project-2-parser-sample) is implemented in this C++ port.


	This includes:
	- Variable Declarations (int a; int b;)
	- Assignments			(a = b;)
	- If Statements 		(if(a < b))
	- While Statements 		(while(a < b) { a = b; } )
	- Do While Statements	(do { a = b; } while(a < b);)
	- Type Checking         (Explained in more detail in ERROR HANDLING)
	- Custom Assert Messages
	- Symbol Table			(Implemented as a Vector of Node pointers)
	- Virtual function implementation to create Parse Tree
	- Parse Tree
	- Printing Parse Tree


TO ADJUST INPUT
----------------
Adjust string field of lexer.input found in main.cpp to desired program to test. 

Make sure '\' character is placed at the end of a line if string input uses multiple lines.

EXAMPLE) 

    lexer.input = 
    	// TEST INPUT 1
    	"{ \
            int b; b = 1; \
            { \
                int a; a = 2; \
                do a = a+1; while(a < 100); \
            } \
        }";


Various examples are commented out in main.cpp.


ERROR HANDLING
--------------
Certain TYPE and SYNTAX errors are handled throughout the parsing process.

If an error is reached, the code will stop and the last line will print an error message.

EXAMPLE)
	
	assert: "SYNTAX ERROR" (LINE: 22) in file parser/parser.cpp





WARNING
------------

* Did not have time to comment out/erase print statements *
* Print statements were used for debugging purposes *
* Tree is printed multiple times *

* LAST TREE PRINTED IS FINAL PARSE TREE *

